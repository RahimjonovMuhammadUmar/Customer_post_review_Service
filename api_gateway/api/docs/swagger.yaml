definitions:
  customer.Address:
    properties:
      house_number:
        type: integer
      id:
        type: integer
      street:
        type: string
    type: object
  customer.AddressRequest:
    properties:
      house_number:
        type: integer
      street:
        type: string
    type: object
  customer.CustomerRequest:
    properties:
      addresses:
        items:
          $ref: '#/definitions/customer.AddressRequest'
        type: array
      bio:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      phone_number:
        type: string
      token:
        type: string
    type: object
  customer.CustomerWithoutPost:
    properties:
      access_token:
        type: string
      addresses:
        items:
          $ref: '#/definitions/customer.Address'
        type: array
      bio:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      phone_number:
        type: string
      refresh_token:
        type: string
    type: object
  models.AddressRequest:
    properties:
      house_number:
        type: integer
      street:
        type: string
    type: object
  models.AdminResponse:
    properties:
      accessToken:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  models.CustomerRegister:
    properties:
      addresses:
        items:
          $ref: '#/definitions/models.AddressRequest'
        type: array
      bio:
        description: '`json:"username"`'
        type: string
      email:
        description: '`json:"email"`'
        type: string
      firstName:
        description: '`json:"first_name"`'
        type: string
      lastName:
        description: '`json:"last_name"`'
        type: string
      password:
        description: '`json:"password"`'
        type: string
    type: object
  models.Error:
    properties:
      code:
        type: integer
      description:
        type: string
      error: {}
    type: object
  post.Address:
    properties:
      house_number:
        type: integer
      id:
        type: integer
      street:
        type: string
    type: object
  post.Customer:
    properties:
      addresses:
        items:
          $ref: '#/definitions/post.Address'
        type: array
      bio:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      phone_number:
        type: string
    type: object
  post.Media:
    properties:
      id:
        type: integer
      link:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  post.MediaRequest:
    properties:
      link:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  post.Post:
    properties:
      customer_id:
        type: integer
      description:
        type: string
      id:
        type: integer
      medias:
        items:
          $ref: '#/definitions/post.Media'
        type: array
      name:
        type: string
      reviews:
        items:
          $ref: '#/definitions/post.Review'
        type: array
    type: object
  post.PostRequest:
    properties:
      customer_id:
        type: integer
      description:
        type: string
      medias:
        items:
          $ref: '#/definitions/post.MediaRequest'
        type: array
      name:
        type: string
    type: object
  post.PostWithCustomerInfo:
    properties:
      customer:
        $ref: '#/definitions/post.Customer'
      customer_id:
        type: integer
      description:
        type: string
      id:
        type: integer
      medias:
        items:
          $ref: '#/definitions/post.Media'
        type: array
      name:
        type: string
      reviews:
        items:
          $ref: '#/definitions/post.Review'
        type: array
    type: object
  post.PostWithoutReview:
    properties:
      customer_id:
        type: integer
      description:
        type: string
      id:
        type: integer
      medias:
        items:
          $ref: '#/definitions/post.Media'
        type: array
      name:
        type: string
    type: object
  post.Posts:
    properties:
      posts:
        items:
          $ref: '#/definitions/post.Post'
        type: array
    type: object
  post.Review:
    properties:
      customer_id:
        type: integer
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      post_id:
        type: integer
      review:
        type: integer
    type: object
  review.ReviewRequest:
    properties:
      customer_id:
        type: integer
      description:
        type: string
      name:
        type: string
      post_id:
        type: integer
      review:
        type: integer
    type: object
info:
  contact:
    email: rahimzanovmuhammadumar@gmail.com
    name: Muhammad Umar
    url: https://t.me/muhammad_ummar
  description: This is exam server api server
  termsOfService: 2 term exam
  title: exam api
  version: "1.0"
paths:
  /v1/admin/login/{username}/{password}:
    get:
      consumes:
      - application/json
      description: Logins admin
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      - description: password
        in: path
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AdminResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Login admin
      tags:
      - Admin
  /v1/customer:
    post:
      consumes:
      - application/json
      description: this api creates new customer
      parameters:
      - description: Customer
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/customer.CustomerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: json
      summary: create customer api
      tags:
      - customer
    put:
      consumes:
      - application/json
      description: this api updates customer by id in database
      parameters:
      - description: Customer
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/customer.CustomerWithoutPost'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: json
      security:
      - BearerAuth: []
      summary: Update customer api
      tags:
      - customer
  /v1/customer/{id}:
    delete:
      consumes:
      - application/json
      description: this api deletes customer from database
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      responses: {}
      security:
      - BearerAuth: []
      summary: Delete customer api
      tags:
      - customer
    get:
      consumes:
      - application/json
      description: this api finds existing customer
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: json
      security:
      - BearerAuth: []
      summary: get customer api
      tags:
      - customer
  /v1/customer/search:
    get:
      consumes:
      - application/json
      description: this api searches customer
      parameters:
      - description: Limit
        in: query
        name: limit
        required: true
        type: integer
      - description: Page
        in: query
        name: page
        required: true
        type: integer
      - description: Order:DescOrAsc
        in: query
        name: orderBy
        required: true
        type: string
      - description: Field:Value
        in: query
        name: fieldValue
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: json
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: search customer api
      tags:
      - customer
  /v1/login/{email}/{password}:
    get:
      consumes:
      - application/json
      description: Logins customer
      parameters:
      - description: email
        in: path
        name: email
        required: true
        type: string
      - description: password
        in: path
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/customer.CustomerWithoutPost'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Login customer
      tags:
      - Auth
  /v1/post:
    post:
      consumes:
      - application/json
      description: this api creates new post
      parameters:
      - description: Post
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/post.PostRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: json
      security:
      - BearerAuth: []
      summary: create post api
      tags:
      - post
    put:
      consumes:
      - application/json
      description: update post api
      parameters:
      - description: Update post by id
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/post.PostWithoutReview'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/post.PostWithoutReview'
      security:
      - BearerAuth: []
      summary: Updates post by id
      tags:
      - post
  /v1/post/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Post and it's reviews by Id
      parameters:
      - description: post_id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: Delete post from database
      tags:
      - post
    get:
      consumes:
      - application/json
      description: Get Post infos with id
      parameters:
      - description: post_id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/post.PostWithCustomerInfo'
      security:
      - BearerAuth: []
      summary: Get post with customer information
      tags:
      - post
  /v1/post/customers_posts/{id}:
    get:
      consumes:
      - application/json
      description: Get posts of customer
      parameters:
      - description: customer_id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/post.Posts'
      security:
      - BearerAuth: []
      summary: Gets post by customers id
      tags:
      - post
  /v1/post/delete_customers_posts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Post by Customer Id
      parameters:
      - description: customer_id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: Delete customers posts
      tags:
      - post
  /v1/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: user data
        in: body
        name: userData
        required: true
        schema:
          $ref: '#/definitions/models.CustomerRegister'
      produces:
      - application/json
      responses:
        "200":
          description: Message sended to your email succesfully
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
      summary: Register for authentication
      tags:
      - Auth
  /v1/register/{code}/{email}:
    get:
      consumes:
      - application/json
      parameters:
      - description: code
        in: path
        name: code
        required: true
        type: integer
      - description: email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: json
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
      summary: Verify for authentication
      tags:
      - Auth
  /v1/review:
    post:
      consumes:
      - application/json
      description: this api creates new review
      parameters:
      - description: Review
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/review.ReviewRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: json
      summary: create review api
      tags:
      - review
  /v1/review/{id}:
    delete:
      consumes:
      - application/json
      description: this api deletes review from database
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      responses: {}
      security:
      - BearerAuth: []
      summary: Delete review api
      tags:
      - review
    get:
      consumes:
      - application/json
      description: this api gets review from database
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      responses: {}
      security:
      - BearerAuth: []
      summary: Get review api
      tags:
      - review
  /v1/review_by_custID/{id}:
    delete:
      consumes:
      - application/json
      description: this api deletes review by customer
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: json
      security:
      - BearerAuth: []
      summary: delete review by cust api
      tags:
      - review
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
